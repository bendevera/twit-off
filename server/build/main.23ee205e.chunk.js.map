{"version":3,"sources":["components/Navbar/Navbar.js","components/UserList/UserList.js","components/UserInput/UserInput.js","components/Prediction/Prediction.js","util.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","UserList","users","map","item","id","id_one","id_two","key","name","value","onClick","makeActive","UserInput","handleChange","e","setState","screen_name","target","handleAdd","preventDefault","console","log","state","sendUser","onChange","this","type","placeholder","React","Component","Prediction","input","handleSubmit","makePrediction","resultStatement","prediction","rows","API_URL","App","addUser","Promise","resolve","reject","fetch","method","headers","body","JSON","stringify","then","response","json","responseJson","catch","error","sentence","exampleTweet","result","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.23ee205e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navbar = (props) => {\n    return (\n        <nav className=\"navbar navbar-dark bg-dark\">\n            <span className=\"navbar-brand\">twit off.</span>\n            \n        </nav>\n    )\n}\n\n\nexport default Navbar;","import React from 'react';\n\n\nconst UserList = (props) => {\n    return (\n        <ul className=\"list-group\">\n            {props.users.map(item => {\n                if (item.id === props.id_one || item.id === props.id_two) {\n                    return (\n                        <li \n                            key={item.id} \n                            className=\"list-group-item list-group-item-action list-group-item-info\"\n                            >{item.name}</li>\n                    )\n                }\n                return (\n                    <li \n                        key={item.id} \n                        value={item.id} \n                        onClick={props.makeActive} \n                        className=\"list-group-item list-group-item-action\"\n                        >{item.name}</li>\n                )\n            })}\n        </ul>\n    )\n}\n\n\nexport default UserList;","import React from 'react';\n\nclass UserInput extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            screen_name: \"\"\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            screen_name: e.target.value\n        })\n    }\n\n    handleAdd = (e) => {\n        e.preventDefault()\n        console.log(this.state.screen_name)\n        this.props.sendUser(this.state.screen_name)\n    }\n\n    render() {\n        return (\n            <form className=\"form-inline justify-content-between my-2\">\n                <div className=\"form-group mb-3 mx-1\">\n                    <label className=\"sr-only\">Twitter Handle</label>\n                    <input \n                        onChange={this.handleChange} \n                        type=\"text\" \n                        className=\"form-control\" \n                        placeholder=\"Twitter Handle\" />\n                </div>\n                <button onClick={this.handleAdd} className=\"btn btn-outline-info mb-3 mx-1\">add user</button>\n            </form>\n        )\n    }\n}\n\nexport default UserInput;","import React from 'react';\n\nclass Prediction extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            input: ''\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            input: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault() \n        this.props.makePrediction(this.state.input)\n    }\n\n    render() {\n        var resultStatement;\n        if (this.props.prediction) {\n            resultStatement = (\n                <h2 className=\"text-dark my-2\">That has to be {this.props.prediction}!</h2>\n            )\n        } else {\n            resultStatement = (\n                <div></div>\n            )\n        }\n        return (\n            <div>\n                <div className=\"form-group\">\n                    <label>example tweet</label>\n                    <textarea \n                        className=\"form-control\" \n                        rows=\"3\"\n                        onChange={this.handleChange}></textarea>\n                </div>\n                <button \n                    onClick={this.handleSubmit} \n                    className=\"btn btn-outline-info\">get prediction</button>\n                {resultStatement}\n            </div>\n        )\n    }\n}\n\nexport default Prediction;","const API_URL = \"http://localhost:5000\"\n\nexport const getUsers = function(){\n    return new Promise((resolve, reject) => {\n        console.log(API_URL + \"/api/users\")\n        fetch(API_URL + \"/api/users\")\n        .then((response) => response.json())\n        .then((responseJson) => {\n            resolve(responseJson['data'])\n        })\n        .catch((error) => {\n            reject(error)\n        })\n    })\n}\n\nexport const addUser = function(screen_name){\n    return new Promise((resolve, reject) => {\n        console.log(API_URL + \"/api/users\")\n        fetch(API_URL + \"/api/users\", {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({screen_name: screen_name})\n        })\n        .then((response) => response.json())\n        .then((responseJson) => {\n            resolve(responseJson['data'])\n        })\n        .catch((error) => {\n            reject(error)\n        })\n    })\n}\n\nexport const makePrediction = function(id_one, id_two, exampleTweet){\n    return new Promise((resolve, reject) => {\n        console.log(API_URL + \"/api/predict\")\n        fetch(API_URL + \"/api/predict\", {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                id_one: id_one,\n                id_two: id_two,\n                sentence: exampleTweet\n            })\n        })\n        .then((response) => response.json())\n        .then((responseJson) => {\n            resolve(responseJson['data'])\n        })\n        .catch((error) => {\n            reject(error)\n        })\n    })\n}","import React from 'react';\nimport Navbar from './Navbar/Navbar';\nimport UserList from './UserList/UserList'\nimport UserInput from './UserInput/UserInput';\nimport Prediction from './Prediction/Prediction';\nimport { getUsers, addUser, makePrediction } from '../util';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      users: [],\n      id_one: null,\n      id_two: null,\n      prediction: null\n    }\n  }\n\n  componentDidMount() {\n    getUsers()\n      .then((users) => {\n        console.log(users)\n        this.setState({\n          users: users\n        })\n      })\n      .catch((error) => {\n        console.log(\"ERROR:\")\n        console.log(error)\n      })\n  }\n\n  addUser = (screen_name) => {\n    addUser(screen_name)\n      .then((users) => {\n        console.log(users)\n      })\n  }\n\n  makeActive = (e) => {\n    this.setState({\n      id_one: e.target.value,\n      id_two: this.state.id_one\n    })\n  }\n\n  makePrediction = (sentence) => {\n    makePrediction(this.state.id_one, this.state.id_two, sentence)\n      .then((result) => {\n        console.log(result)\n        this.setState({\n          prediction: result\n        })\n      })\n      .catch((error) => {\n        console.log(error)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App bg-light vh-100\">\n        <Navbar />\n        <div className=\"row mx-1\">\n          <div className=\"col\">\n            <UserInput sendUser={this.addUser} />\n            <UserList \n              users={this.state.users}\n              id_one={this.state.id_one}\n              id_two={this.state.id_two} \n              makeActive={this.makeActive}/>\n          </div>\n          <div className=\"col\">\n            <Prediction \n              makePrediction={this.makePrediction}\n              prediction={this.state.prediction} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}